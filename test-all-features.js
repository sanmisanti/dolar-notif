#!/usr/bin/env node

/**
 * SCRIPT DE TESTING COMPLETO - TODAS LAS CARACTER√çSTICAS
 *
 * Este script simula diferentes escenarios para probar:
 * 1. Alerta Z-score (precio 2+ œÉ por debajo de la media)
 * 2. Alerta de 3 ca√≠das consecutivas
 * 3. Alerta de proximidad de deadline (‚â§7 d√≠as)
 * 4. Reporte bi-diario
 */

import { MonitorService } from './src/monitor.js';
import { Analytics } from './src/analytics.js';
import { Database } from './src/database.js';
import { NotificationService } from './src/notifications.js';

// Configurar solo email de testing
process.env.EMAIL_TO = 'sanmisanti@gmail.com';
process.env.TESTING_MODE = 'true';
process.env.DB_PATH = './data/simulation_test.db';

class FeatureTester {
  constructor() {
    this.db = new Database();
    this.analytics = new Analytics(this.db);
    this.notifications = new NotificationService();
    this.monitor = new MonitorService();
  }

  async initialize() {
    console.log('üß™ INICIANDO TESTING COMPLETO DE CARACTER√çSTICAS');
    console.log('==============================================\n');

    await this.db.initialize();
    await this.notifications.initialize();
    console.log('‚úÖ Servicios inicializados\n');
  }

  async cleanup() {
    await this.db.close();
    console.log('üßπ Limpieza completada\n');
  }

  // Simular datos hist√≥ricos para testing
  async seedTestData() {
    console.log('üìä CREANDO DATOS DE PRUEBA...');

    const basePrice = 1400;
    const baseDate = new Date('2025-09-10');

    // Crear 20 d√≠as de datos hist√≥ricos con tendencia normal
    for (let i = 0; i < 20; i++) {
      const date = new Date(baseDate);
      date.setDate(date.getDate() + i);

      // Precio normal con variaci√≥n peque√±a
      const price = basePrice + (Math.random() - 0.5) * 20;

      const testData = {
        compra: price,
        venta: price + 50,
        casa: 'nacion',
        nombre: 'Oficial',
        moneda: 'USD',
        fechaActualizacion: date  // Pasar objeto Date directamente
      };

      // Insertar con timestamp espec√≠fico
      await new Promise((resolve, reject) => {
        this.db.db.run(
          `INSERT INTO dollar_history (compra, venta, casa, nombre, moneda, fecha_actualizacion, timestamp)
           VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [testData.compra, testData.venta, testData.casa, testData.nombre, testData.moneda, testData.fechaActualizacion, date.toISOString()],
          (err) => err ? reject(err) : resolve()
        );
      });
    }

    console.log('‚úÖ Datos base creados (20 d√≠as, precio ~$1400)\n');
  }

  // Test 1: Z-score alert
  async testZScoreAlert() {
    console.log('üßÆ TEST 1: ALERTA Z-SCORE (Precio 2+ œÉ por debajo)');
    console.log('================================================');

    // Agregar precio muy bajo para disparar alerta z-score
    const lowPrice = 1300; // Significativamente por debajo de 1400
    console.log(`üí∞ Simulando precio bajo: $${lowPrice} (vs media ~$1400)`);

    const result = await this.analytics.analyzeCurrentPrice(lowPrice);

    console.log('üìà Resultado del an√°lisis:');
    console.log(`   Alertas detectadas: ${result.alerts?.length || 0}`);

    if (result.alerts && result.alerts.length > 0) {
      result.alerts.forEach(alert => {
        console.log(`   üö® ${alert.type}: ${alert.message}`);
        console.log(`      Severidad: ${alert.severity}`);
      });

      console.log('\nüìß Enviando email de alerta...');
      await this.notifications.sendAnalysisResult(result);
      console.log('‚úÖ Email enviado con alerta Z-score\n');
    } else {
      console.log('‚ùå No se detect√≥ alerta Z-score (revisar umbral)\n');
    }
  }

  // Test 2: 3 consecutive drops
  async testConsecutiveDropsAlert() {
    console.log('üìâ TEST 2: ALERTA 3 CA√çDAS CONSECUTIVAS');
    console.log('======================================');

    console.log('üí∞ Simulando 3 ca√≠das consecutivas...');

    const basePriceForDrops = 1450;
    const drops = [
      { price: basePriceForDrops, desc: 'Precio inicial' },
      { price: basePriceForDrops - 15, desc: 'Primera ca√≠da (-$15)' },
      { price: basePriceForDrops - 35, desc: 'Segunda ca√≠da (-$20)' },
      { price: basePriceForDrops - 60, desc: 'Tercera ca√≠da (-$25)' }
    ];

    // Insertar las ca√≠das consecutivas (m√°s recientes que datos base)
    for (let i = 0; i < drops.length; i++) {
      const date = new Date();
      date.setMinutes(date.getMinutes() - (drops.length - i - 1) * 5); // 5 min de diferencia entre cada una

      const testData = {
        compra: drops[i].price,
        venta: drops[i].price + 50,
        casa: 'nacion',
        nombre: 'Oficial',
        moneda: 'USD',
        fechaActualizacion: date,
        timestamp: date
      };

      await this.db.saveRate(testData);
      console.log(`   ${i + 1}. ${drops[i].desc}: $${drops[i].price} - ${date.toLocaleTimeString()}`);
    }

    // Analizar el √∫ltimo precio (despu√©s de 3 ca√≠das)
    const result = await this.analytics.analyzeCurrentPrice(drops[drops.length - 1].price);

    console.log('\nüìà Resultado del an√°lisis:');
    console.log(`   Alertas detectadas: ${result.alerts?.length || 0}`);

    if (result.alerts && result.alerts.length > 0) {
      result.alerts.forEach(alert => {
        console.log(`   üö® ${alert.type}: ${alert.message}`);
      });

      console.log('\nüìß Enviando email de tendencia bajista...');
      await this.notifications.sendAnalysisResult(result);
      console.log('‚úÖ Email enviado con alerta de tendencia\n');
    } else {
      console.log('‚ùå No se detect√≥ alerta de tendencia consecutiva\n');
    }
  }

  // Test 3: Deadline proximity
  async testDeadlineProximityAlert() {
    console.log('‚è∞ TEST 3: ALERTA PROXIMIDAD DEADLINE');
    console.log('====================================');

    console.log('üìÖ Simulando proximidad a fecha l√≠mite (6 octubre)...');
    console.log('üí° Nota: La fecha l√≠mite est√° configurada para 6 de octubre de 2025');

    // Calcular d√≠as restantes reales
    const deadline = new Date('2025-10-06');
    const today = new Date();
    const daysRemaining = Math.ceil((deadline - today) / (1000 * 60 * 60 * 24));

    console.log(`üìä D√≠as restantes reales: ${daysRemaining}`);

    if (daysRemaining <= 7) {
      console.log('üéØ ¬°Estamos dentro del per√≠odo de proximidad!');

      // Usar un precio moderadamente bueno para activar la alerta
      const goodPrice = 1380;
      console.log(`üí∞ Simulando precio favorable: $${goodPrice}`);

      const result = await this.analytics.analyzeCurrentPrice(goodPrice);

      console.log('\nüìà Resultado del an√°lisis:');
      console.log(`   Alertas detectadas: ${result.alerts?.length || 0}`);

      if (result.alerts && result.alerts.length > 0) {
        result.alerts.forEach(alert => {
          console.log(`   üö® ${alert.type}: ${alert.message}`);
        });

        console.log('\nüìß Enviando email de proximidad...');
        await this.notifications.sendAnalysisResult(result);
        console.log('‚úÖ Email enviado con alerta de proximidad\n');
      } else {
        console.log('‚ùå No se detect√≥ alerta de proximidad\n');
      }
    } else {
      console.log(`‚è≥ Todav√≠a faltan ${daysRemaining} d√≠as para la fecha l√≠mite`);
      console.log('üí° La alerta de proximidad se activa cuando quedan ‚â§7 d√≠as\n');
    }
  }

  // Test 4: Bi-daily report
  async testBidailyReport() {
    console.log('üìä TEST 4: REPORTE BI-DIARIO');
    console.log('============================');

    console.log('üìß Generando y enviando reporte bi-diario...');

    try {
      await this.notifications.sendBidailyReport(this.db);
      console.log('‚úÖ Reporte bi-diario enviado exitosamente');
      console.log('üì¨ Revisa el email para ver estad√≠sticas completas\n');
    } catch (error) {
      console.error('‚ùå Error enviando reporte:', error.message);
    }
  }

  // Ejecutar todos los tests
  async runAllTests() {
    try {
      await this.initialize();

      console.log('üóÇÔ∏è LIMPIANDO BD DE SIMULACI√ìN...');
      // Limpiar BD de testing
      await new Promise((resolve) => {
        this.db.db.run('DELETE FROM dollar_history', resolve);
      });
      console.log('‚úÖ BD limpia\n');

      await this.seedTestData();

      console.log('üöÄ EJECUTANDO TESTS DE CARACTER√çSTICAS...\n');

      await this.testZScoreAlert();
      await this.testConsecutiveDropsAlert();
      await this.testDeadlineProximityAlert();
      await this.testBidailyReport();

      console.log('üéâ TESTING COMPLETO FINALIZADO');
      console.log('===============================');
      console.log('üì¨ Revisa tu email (sanmisanti@gmail.com) para ver todas las notificaciones');
      console.log('üí° Cada test deber√≠a haber enviado un email diferente con su respectiva alerta');

    } catch (error) {
      console.error('üí• Error en testing:', error);
    } finally {
      await this.cleanup();
    }
  }
}

// Ejecutar tests si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  const tester = new FeatureTester();
  tester.runAllTests();
}